// this is the main source file for Xenex Disinfector code for the Operator user role.
#include "GUI\XenexMainDLG.h"

#define LOG_REC_LEN 1024

static TBool cancelCycle = 1; // initialize to UNSAFE.
static T_uezTimeDate DTStart;
static T_uezTimeDate DTStop;
static char logRec[LOG_REC_LEN];    
static int G_fault_code = 0;
static int G_fault_state = 0;
static ShowMsgDataItem_t* pShowMsg = 0;
static TBool flgUserHitCancel = EFalse;
static char szEndCycleMsgBuf[512];
// DEM 01-26.2013, get away from difftime which gives a bogus result when a
// disinfect cycle starts on the last day of one month, and ends on the first
// day of the next month.  See the sample log entries showing the error.
/*
11/30/2012	Friday    AA0027 : Omega	University of Wisconsin (1017)	University of Wisconsin (1040)	EVS	N/D	B4/566	N/A	11/30/2012 23:58	  12/1/2012 0:08	1	1	763,281,490	900	No
11/30/2012	Friday    AA0041 : Vesta	University of Wisconsin (1017)	University of Wisconsin (1040)	EVS	N/D	B6/634	N/A	11/30/2012 23:55	   12/1/2012 0:11	1	3	763,281,512	934	Yes
11/30/2012	Friday    AA0147 : Adama	Geisinger Health System (1025)	Geisinger Wyoming Valley (1048)	EVS	N/D	OR1	N/A	11/30/2012 23:55	   12/1/2012 0:26	1	2	763,282,678	2,700	No
11/30/2012      Friday    AA0052 : Ramsay	Orlando Health System (1031)	Orlando Regional Medical Center (1059)	EVS	N/D	306	N/A	11/30/2012 23:47  	  12/1/2012 0:02	1	2	763,281,489	900	No
12/31/2012	Monday    AA0075 : Venus	Cone Health (1013)	Wesley Long Hospital (1080)	EVS	N/D	OR3	N/A	12/31/2012 23:31	1/1/2013 0:16	1	4	-763,193,759	1,111	Yes
11/1/2012	Thursday  AA0027 : Omega	University of Wisconsin (1017)	University of Wisconsin (1040)	EVS	N/D	D6/544	N/A	11/1/2012 23:39	11/1/2012 23:50	1	3	-85,484	1,350	Yes
*/
static TUInt32 tui32StartingTicks = 0; // see UEZTickCounterGet
static TUInt32 tui32DurationTicks = 0; // see UEZTickCounterGetDelta


//****************************************************************************
//
// Function: void logDisinfectToFile(char* msg)
//
// Description:
//  Write requested record to log file
//
// Parameters:
//  msg - a previously formated status message
//
// Return:
// 
//
// Remarks:
//  Note:  Version 6.25 had an issue with difftime computing elapsed seconds 
//         if a disinfect cycle spanned a month change.  Can't seem to trust
//         time duration computations based on the RTC, so I'm changing to 
//         the 1000 Hz system tick library functions instead.
//         See "2.2 Î¼EZ Tick Counter API" in the "uEZ Tick Counter API" doc.
//
//****************************************************************************
void logDisinfectToFile(char* msg)
{
 
  // start with a clean slate
  memset(logRec,0,sizeof(logRec));

  // log DTStart
  sprintf(&logRec[strlen(logRec)],"%02d/%02d/%04d %02d:%02d:%02d,",
    DTStart.iDate.iMonth,
    DTStart.iDate.iDay,
    DTStart.iDate.iYear,
    DTStart.iTime.iHour,
    DTStart.iTime.iMinute,
    DTStart.iTime.iSecond);

  // log DTStop
  sprintf(&logRec[strlen(logRec)],"%02d/%02d/%04d %02d:%02d:%02d,",
    DTStop.iDate.iMonth,
    DTStop.iDate.iDay,
    DTStop.iDate.iYear,
    DTStop.iTime.iHour,
    DTStop.iTime.iMinute,
    DTStop.iTime.iSecond);

  // log UserType
  sprintf(&logRec[strlen(logRec)],"%s,",GetUserTypeStr());

  // Log UserID
  sprintf(&logRec[strlen(logRec)],"%s,",GetUserNameStr());

  // Log RunSecs
  long lDiffTime = tui32DurationTicks/1000;
  sprintf(&logRec[strlen(logRec)],"%d,",lDiffTime);

  // log number of flashes
  sprintf(&logRec[strlen(logRec)],"%d,",spi_miso_fields.flash_count);

  // log UVImJ
  sprintf(&logRec[strlen(logRec)],"0,");

  // log RoomType
  sprintf(&logRec[strlen(logRec)],"%s,",GetRoomStateStr());

  // Log RoomNum
  sprintf(&logRec[strlen(logRec)],"%s,",GetRoomNumberStr());

  // Log SafetyCode1
  sprintf(&logRec[strlen(logRec)],"%d,",G_fault_code);

  // Log SafetyCode2
  sprintf(&logRec[strlen(logRec)],"%d,",G_fault_state);

  // Log SafetyCode3
  sprintf(&logRec[strlen(logRec)],"0,");

  // Log StatusDesc
  if (msg) {
    sprintf(&logRec[strlen(logRec)],"\"%s\"",msg);
  }
  strcat(logRec,"\r\n");

  AppendDisinfectLogRecord(logRec);

}


TBool checkDisinfectCancel()
{
    // returns True if disinfect cycle should be aborted right away, e.g. because 
    // it is unsafe to emit UV right now, e.g. because room occupancy has been
    // detected, or any other reason.
    
    // XDSI_FAULT goes high if a fault code is captured in the safety circuit.
    // XDSI_ARMED goes low at that time also, but that's not a factor here.
    if (getSafetySignal(XDSI_FAULT, 1))
    {
        cancelCycle = 1;
        return 1;
    }
    // XDSI_ARMED goes low while XDSI_FAULT remains low, to signal a no-fault stoppage,
    // such as flash count limit being reached.
    if ( ! getSafetySignal(XDSI_ARMED, 0))
    {
        cancelCycle = 1;
        return 1;
    }
    return 0;
}

static void UpdateDisplayedFlashCount(void) {
    WM_MESSAGE msg;
    memset(&msg,0,sizeof(msg));
    msg.MsgId = WM_UPDATE_PULSE_COUNTER;
    WM_BroadcastMessage(&msg);
}

//****************************************************************************
//
// Function: void endDisinfectCycle(char* msg, TBool doLog, TBool doStow)
//
// Description:
//  A disinfect cycle was running and needs to be terminated.  It may be on
//  error or a successful run.
//
// Parameters:
//  msg - string to be displayed, most likely an error
//  doLog - should the end disinfect be logged?
//  doStow - should the perisciope be brought home?
//
// Return:
//
// Remarks:
//
//****************************************************************************
void endDisinfectCycle(char* msg, TBool doLog, TBool doStow, TUInt32 fault_code)
{
    char* psz = "\nPlease wait...";
    // bring the hardware & other resources back down from their state of readiness after
    // a disinfect cycle.  this function is used in both normal completion and fault cases.
    // pass NULL for no message display.
    
    clearSafetySignals(); // this should cause UV emission to cease.    
    enableRemoteInterlockDriver(0); // allow remote interlock board to fall asleep again.

    (*clockWorkspace)->Get(clockWorkspace, &DTStop);
    tui32DurationTicks = UEZTickCounterGetDelta(tui32StartingTicks); // compute the cycle duration


    // dump final number of flashes to console.
    // this also unpacks the data for the logging to file below.
    debugSafetySpi();
    
    // update the flash count in EE
    UpdateFlashCount(spi_miso_fields.flash_count);

    // update the text box on the maintenance tab
    UpdateDisplayedFlashCount();
  
     // if a string is to be displayed, show it
    if ((msg != NULL) && (fault_code != 15) && (fault_code != 16)) {
      // if a message is being displayed
      if (pShowMsg) {
        // destory it
        showMessageEnd(pShowMsg);
        pShowMsg = 0;
      } // endif (pShowMsg) {

      // create another message
      strcpy(szEndCycleMsgBuf,msg);
      strcat(szEndCycleMsgBuf,psz);
      pShowMsg = showMessage(0,szEndCycleMsgBuf);

    //special case for fault codes 15 and 16
    } else if (GetDisinfectCycleComplete() && (fault_code == 15)) {
      // if a message is being displayed
      if (pShowMsg) {
        // destory it
        showMessageEnd(pShowMsg);
        pShowMsg = 0;
      } // endif (pShowMsg) {
      // display the the final disinfect time and pulse count
      snprintf(szEndCycleMsgBuf,sizeof(szEndCycleMsgBuf),
        "Disinfection cycle completed with %d flashes.\n"
        "%s"
        "%s",
        spi_miso_fields.flash_count, msg, psz);
       pShowMsg = showMessage(0,szEndCycleMsgBuf);
          
    // else if this is the end of a successful disinfect cycle
    } else if (GetDisinfectCycleComplete()) {
      // if a message is being displayed
      if (pShowMsg) {
        // destory it
        showMessageEnd(pShowMsg);
        pShowMsg = 0;
      } // endif (pShowMsg) {
      // display the the final disinfect time and pulse count
      if ( ! spi_miso_fields.remote_batt_low){
      snprintf(szEndCycleMsgBuf,sizeof(szEndCycleMsgBuf),
        "Disinfect cycle completed:\n"
        "   %d minutes\n"
        "   %d flashes\n"
        "Orange cone battery low. Charge cone 4 to 6 hrs.\n"
        "If battery dies, stop button will not work\n"
        "but device will still cycle."
        "%s",
        GetDisinfectTimeInMinutes(), spi_miso_fields.flash_count, psz);
        pShowMsg = showMessage(0,szEndCycleMsgBuf);
      } else {
      snprintf(szEndCycleMsgBuf,sizeof(szEndCycleMsgBuf),
        "Disinfect cycle completed:\n"
        "   %d minutes\n"
        "   %d flashes\n"
        "%s",
        GetDisinfectTimeInMinutes(), spi_miso_fields.flash_count, psz);
        pShowMsg = showMessage(0,szEndCycleMsgBuf);
      }
    } // end} else if (GetDisinfectCycleComplete())

    // if a message is to be displayed
    if (pShowMsg) {
      showMessageShow(pShowMsg);
    }

    // if down scope
    if (doStow) {
        XD_lift_down_to_stowed();
    } // endif (doStow) {

    // if logging
    if (doLog) {
        // append record
        logDisinfectToFile(msg);
    } // endif (doLog) {

    // finish stowing lift; show primary fault message.
    if (doStow) {
        XD_wait_for_lift_stop(LIFT_MOTION_TIMEOUT_TICKS, NULL);
        if (!XD_motor_is_ok()) { 
            if (pShowMsg) {
              showMessageEnd(pShowMsg);
              pShowMsg = 0;
            } // endif (pShowMsg) {
            snprintf(szEndCycleMsgBuf,sizeof(szEndCycleMsgBuf),
              " Motor controller, communication, or\n"
              "mechanical fault while stowing."
              "%s",psz);
            pShowMsg = showMessage(0,szEndCycleMsgBuf);
         } // endif (!XD_motor_is_ok()) { 
    } // end if (doStow) {

    // if a message is to be displayed
    if (pShowMsg) {
      // destory it
      showMessageShow(pShowMsg);
    }

    // if FPGA has XDSI_ARMED
    if (getSafetySignal(XDSI_ARMED,ETrue)) {
      // wait up to 30 seconds for it to clear it's XDSI_ARMED
      TUInt16 to = 30000;
      while (to-- && getSafetySignal(XDSI_ARMED,ETrue)) { 
        UEZTaskDelay(1);
      } // end while (to-- && getSafetySignal(XDSI_ARMED,ETrue)) {
    } // endif (getSafetySignal(XDSI_ARMED,ETrue)) {

    // if there is a visible showMessage box
    if (pShowMsg) {
      // make the "Ok" button visible
      showMessageShowOk(pShowMsg,ETrue);
      // it will be destroyed when Ok is clicked
    }
}

void safetyFault(TUInt32 fault_code, TBool doLog, TBool doStow)
{
  G_fault_code = fault_code;
  G_fault_state = spi_miso_fields.fault_state;
  // react to the given safety fault code.
  // basically the fault message is formatted here based on the given fault code,
  // and then used for all the usual steps in endDisinfectCycle();

  const TUInt32 BUFLEN = 180;
  char buf[BUFLEN];
  if (fault_code <= XDS_MAX_FAULT_MESSAGE){
    if((fault_code == 15) || (fault_code == 16)){
      snprintf(buf, BUFLEN, "%s", XDS_FAULT_MESSAGES[fault_code]);
      HideCountDownDlg();
      SetDisinfectCycleComplete();
    }else{
      snprintf(buf, BUFLEN, "%s\nSafety fault:\ncode %d state %d-%d%d%d%d%d", 
          XDS_FAULT_MESSAGES[fault_code], 
          fault_code, 
          spi_miso_fields.fault_state,
          spi_miso_fields.fault_occupancy[4], 
          spi_miso_fields.fault_occupancy[3], 
          spi_miso_fields.fault_occupancy[2], 
          spi_miso_fields.fault_occupancy[1], 
          spi_miso_fields.fault_occupancy[0]);
      }
  }else{
      snprintf(buf, BUFLEN, "Unknown safety fault:\ncode %d state %d-%d%d%d%d%d", 
          fault_code, 
          spi_miso_fields.fault_state,
          spi_miso_fields.fault_occupancy[4], 
          spi_miso_fields.fault_occupancy[3], 
          spi_miso_fields.fault_occupancy[2], 
          spi_miso_fields.fault_occupancy[1], 
          spi_miso_fields.fault_occupancy[0]); 
      }
  endDisinfectCycle(buf, doLog, doStow, fault_code);      
}

void disinfectCycle(void)
{
    G_fault_code = 0;
    G_fault_state = 0;
    // execute one whole disinfect cycle, from stowed to stowed.
    debugWriteLine("init disinfectCycle");
    TUInt32 fault_code = XDS_OK;
    (*clockWorkspace)->Get(clockWorkspace, &DTStart); // initialize to a reasonable value in case the cycle aborts and something has to be written to the log file.
    DTStop = DTStart;

    tui32DurationTicks = 0;
    tui32StartingTicks = UEZTickCounterGet();  // grab the system tick counter

    
    // wake up remote interlock.  this will need up to 10 seconds to take effect.

    enableRemoteInterlockDriver(1);
    // after this point all return's must call endDisinfectCycle() to clean up!!  
    // otherwise unsafe things could happen, 
    // plus the remote interlock batteries could be drained because it's kept awake forever.
    
    // compute slew rate based on round-trip distance and desired disinfect time.
    debugFormat("minutes %d", GetDisinfectTimeInMinutes());
    //        TUInt32 rate = ((3084000 * 2) / disinfectMinutes) / 60;  //original MRB 1/3/2012
    TUInt32 rate = ((48187 * 2) / GetDisinfectTimeInMinutes()) / 60;  // divided by 4 for 64 microsteps MRB
    debugFormat("slew rate %d", rate);
    TUInt32 strokeTimeMS = GetDisinfectTimeInMinutes() * 60 * 1000 / 2;
    debugFormat("stroke time %d", strokeTimeMS);
    TUInt32 strokeTimeoutMS = strokeTimeMS * 5 / 4;
    debugFormat("timeout %d", strokeTimeoutMS);
    TUInt32 lowerDwellMS = GetDisinfectTimeInMinutes() * 60 * 1000 / 3;
#if IGNORE_FLASH_COUNT_TIMEOUT
    lowerDwellMS = 2000000000;
#endif    
    debugFormat("dwell %d", lowerDwellMS);
    debugFormat("stowed %d", XD_lift_position());
    
    // compute an appropriate number of UV flashes for this cycle.
    // this acts as the main stop criteria for ending the cycle.
    // this way prevents artificially elongating the cycle and the dose because
    // the lift motor could have slipped, taking longer to arrive, 
    // because it has no motion encoder.
    TUInt32 fcl = GetDisinfectTimeInMinutes() * 90;
    setFlashCountLimit((TUInt16)fcl);
    debugFormat("flash count limit %d", fcl);
    
    // begin movement to an arbitrary position about 4" above stowed, per JW 2011/09/19.
    // this prevents the strobe ventilation fan's airstream from fouling the ultrasonic occupancy sensors.
    //XD_motor_cmd("MR 1040000", 1, MOTOR_COMM_TIMEOUT_TICKS);  // MRB 1/3/2012 moved to motor.c
    XD_motor_fan_lift();
    if ( ! XD_motor_is_ok() )
    {
        HideAcceptDialog();
        endDisinfectCycle(
          "Motor controller, communication, or\n"
          "mechanical fault during initial movement.", ETrue, ETrue, 99);
        return;
    }
    
    // direct user to arm the system and leave the room.
  
    // allow the user to arm the system ONLY after lift has stopped.
    XD_wait_for_lift_stop(LIFT_MOTION_TIMEOUT_TICKS, NULL);
    setSafetyHigh(XDSO_ARM_ENABLE); // release the external safety circuits (external to the FPGA) so they can operate.
    setSafetyLow (XDSO_ARM_REQUEST); // ensure this signal is low before starting the sequence of edges.
    setSafetyHigh(XDSO_ARM_REQUEST); // 2 whole pulses of high, low, required to break out of idle state.
    setSafetyLow (XDSO_ARM_REQUEST);
    setSafetyHigh(XDSO_ARM_REQUEST);
    setSafetyLow (XDSO_ARM_REQUEST);
    setSafetyHigh(XDSO_ARM_REQUEST); // hold this signal high for the remainder of the disinfect cycle.
    fault_code = waitForSafetySignal(XDSI_ARMED, 1, 120000);
    if (fault_code != XDS_OK) {
        HideAcceptDialog();
        safetyFault(fault_code, ETrue, ETrue);
        return;
    }
    
    // wait for user to leave the room, completing the initial sequence in the safety circuit based on occupancy sensors.
    HideAcceptDialog();
    ShowCountDownDlg();
    fault_code = waitForSafetySignal(XDSI_RUN_MOTORS, 1, 60000);
    if (fault_code != XDS_OK) {
        HideCountDownDlg();
        safetyFault(fault_code, ETrue, ETrue);
        return;
    }
    
    // finish deploying the lift to its nearest emission position.
    // drawSplash();
    XD_lift_up_to_lower_emission();
    XD_wait_for_lift_stop(LIFT_MOTION_TIMEOUT_TICKS, NULL);
    if ( ! XD_motor_is_ok() ) {
        HideCountDownDlg();
        endDisinfectCycle(
          "Motor controller, communication, or\n"
          "mechanical fault while deploying.", ETrue, ETrue, 99);
        return;
    }
    debugFormat("lower %d", XD_lift_position());
//patch: start VLA rotation

    // disinfect up stroke.
    setSafetyHigh(XDSO_FLASH_REQUEST);
    fault_code = waitForSafetySignal(XDSI_FLASHING, 1, 60000);   
    if (fault_code != XDS_OK)
    {
        HideCountDownDlg();
        safetyFault(fault_code, ETrue, ETrue);
        return;
    }
    (*clockWorkspace)->Get(clockWorkspace, &DTStart); // update this to the correct start time as soon as it is known.
    tui32StartingTicks = UEZTickCounterGet(); // grab the system tick counter
    cancelCycle = 0;
    XD_lift_up_to_upper_emission(rate);
    XD_wait_for_lift_stop(strokeTimeoutMS, checkDisinfectCancel);
    if ( ! XD_motor_is_ok() ) {
        HideCountDownDlg();
        endDisinfectCycle(
          "Motor controller, communication, or\n"
          "mechanical fault while rising.", ETrue, ETrue, 99); 
        return;
    }       
    if (cancelCycle)
    {
        debugWriteLine("cancelCycle");
    }
    else
    {
        // disinfect down stroke.
        debugFormat("upper %d", XD_lift_position());
        XD_lift_down_to_lower_emission(rate);
        XD_wait_for_lift_stop(strokeTimeoutMS, checkDisinfectCancel);        
        if ( ! XD_motor_is_ok() ) {
            HideCountDownDlg();
            endDisinfectCycle(
              "Motor controller, communication, or\n"
              "mechanical fault while lowering.", ETrue, ETrue, 99); 
            return;
        }
        // dwell at lower emission position; rely on flash count to stop cycle; display error if it doesn't.
        fault_code = waitForSafetySignal(XDSI_FLASHING, 0, lowerDwellMS);   
        if (fault_code == XDS_CPU_TIMEOUT)
        {
            HideCountDownDlg();
            // somehow the flash count limit did not hit in the expected time window.  
            // maybe the motor arrived early, lift position sensor picked up ambient light, etc.
            endDisinfectCycle(
              "Disinfect cycle did not end\n"
              "within the expected time.", ETrue, ETrue, 99); 
            return;
        } 
        else if (fault_code != XDS_OK) {
            HideCountDownDlg();
            safetyFault(fault_code, ETrue, ETrue);
            return;
        } 
    }
    clearSafetySignals(); // this should cause UV emission to cease.    
    
    // read fault code one more time after end of cycle, in case it was set during disinfect strokes.
    fault_code = waitForSafetySignal(XDSI_FAULT, 0, 10); // this will time out immediately and cause the fault code (if any) to be read.
    if (fault_code != XDS_OK) {
        HideCountDownDlg();
        safetyFault(fault_code, ETrue, ETrue); 
        //if(fault_code < 15){
          return;
        //}
    }
    
    // success case.
    HideCountDownDlg();
    SetDisinfectCycleComplete();
    endDisinfectCycle(NULL, ETrue, ETrue, 99);
}

TUInt32 DisinfectCycleTask(T_uezTask aMyTask, void *aParameters)
{
  disinfectCycle();
}

//****************************************************************************
//
// Function: T_uezError StartMotorTestLiftTask(void)
//
// Description:
//  Runs the legacy test_lift routine as a task
//
// Parameters:
//
// Return:
//
// Remarks:
//
//****************************************************************************
T_uezError StartDisinfectCycleTask(void)
{
  T_uezError err;
  T_uezTask uezTask = 0;
  err = UEZTaskCreate(DisinfectCycleTask, "DisinfectCycleTask", 
    _4k_TASK_STACK_SIZE, (void*)0, UEZ_PRIORITY_NORMAL, &uezTask);
  return err;
}

void SetCancelDisinfectCycle(TBool flg) 
{
  if (flgUserHitCancel = flg) {
    pShowMsg = showMessage(0,"Canceling disinfect cycle ...");
  }
}

TBool GetCancelDisinfectCycle(void)
{
  return flgUserHitCancel;
}

